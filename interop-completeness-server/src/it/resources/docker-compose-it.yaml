services:
  completeness-server:
    restart: on-failure
    build: ../../..
    image: interop-completeness-server:local
    # This is needed in order to set the truststore from ADB so we have access to use it.
    entrypoint:
      - "java"
      - "-Djavax.net.ssl.keyStore=/app/tls_wallet/keystore.jks"
      - "-Djavax.net.ssl.keyStorePassword=Longpassword1"
      - "-Djavax.net.ssl.trustStore=/app/tls_wallet/truststore.jks"
      - "-Djavax.net.ssl.trustStorePassword=Longpassword1"
      - "-jar"
      - "app.jar"
    volumes:
      - ../../../build/resources/it/tls_wallet:/app/tls_wallet
    ports:
      - "8080:8080"
    environment:
      RONIN_AUTH_ISSUERS: "http://mock-oauth2:8080/completeness"
      RONIN_AUTH_VALID-AUDIENCES: "https://interop-completeness.local.projectronin.io"
      RONIN_KAFKA_BOOTSTRAP-SERVERS: "kafka:19092"
      RONIN_KAFKA_SECURITY-PROTOCOL: "PLAINTEXT"
      RONIN_KAFKA_SASL_MECHANISM: "GSSAPI"
      SPRING_DATASOURCE_URL: "jdbc:oracle:thin:admin/Longpassword1@(description=(retry_count=0)(retry_delay=3)(address=(protocol=tcps)(port=1522)(host=adb-free))(connect_data=(service_name=my_atp_low.adb.oraclecloud.com))(security=(ssl_server_dn_match=no)))"
      SPRING_DATA_MONGODB_URI: "mongodb://admin:Longpassword1@adb-free:27017/admin?authMechanism=PLAIN&authSource=$$external&ssl=true&retryWrites=false&loadBalanced=true&tlsInsecure=true"
    healthcheck:
      test: [ "CMD", "curl", "-k", "-X", "GET", "localhost:8080/actuator/health" ]
      timeout: 5s
      retries: 30
    depends_on:
      adb-free:
        condition: service_healthy
      adb_config:
        condition: service_completed_successfully
      kafka:
        condition: service_started
      mock-oauth2:
        condition: service_started

  adb-free:
    restart: on-failure
    image: container-registry.oracle.com/database/adb-free:latest
    container_name: adb-free
    hostname: localhost
    environment:
      WORKLOAD_TYPE: ATP
      WALLET_PASSWORD: Longpassword1
      ADMIN_PASSWORD: Longpassword1
    ports:
      - "1522:1522"
      - "8443:8443"
      - "27017:27017"
    expose:
      - "1522"
      - "27017"
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    healthcheck:
      test: [ "CMD", "/bin/bash", "/u01/scripts/healthcheck.sh" ]
      interval: 1m
      timeout: 30s
      start_period: 3m

  adb_config:
    image: docker
    privileged: true
    volumes:
      - ./adb_config.sh:/adb_config.sh
      - /var/run/docker.sock:/var/run/docker.sock
      - ../../../build/resources/it/tls_wallet:/tmp/adb-free/tls_wallet
    command: sh -c /adb_config.sh
    depends_on:
      adb-free:
        condition: service_healthy

  mock-oauth2:
    image: ghcr.io/navikt/mock-oauth2-server:0.5.4
    ports:
      - "8083:8080"
    volumes:
      - ./:/host
    environment:
      - JSON_CONFIG_PATH=/host/mock-oauth2-config.json

  zookeeper:
    image: docker-proxy.devops.projectronin.io/zookeeper
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

  kafka:
    image: docker-proxy.devops.projectronin.io/wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092,
        LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_CREATE_TOPICS: "oci.us-phoenix-1.interop-completeness.dag-registration.v1:1:1,oci.us-phoenix-1.interop-completeness.run-registration.v1:1:1,oci.us-phoenix-1.interop-completeness.load-event.v1:1:1"
    depends_on:
      zookeeper:
        condition: service_started

  # available at http://localhost:8090. Can view topics and messages
  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092
    depends_on:
      kafka:
        condition: service_started

