schema {
  query: Query
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"A collection of all the Resources Types loaded by Mirth as well as the dependencies between them"
type Dag {
  nodes: [DagNode!]!
}

"A node representing a resource type and the resources that consume it"
type DagNode {
  "The resources that consume this resource"
  consumedResources: [String!]!
  "The resource type"
  resource: String!
}

"A resource that failed to load"
type FailedResource {
  "The identifier of the failed resource"
  id: String!
  "Optional error message"
  message: String
}

"A FHIR Resource"
type FhirResource {
  "The identifier of the resource"
  id: String!
  "The FHIR resource type"
  resourceType: String!
}

type Query {
  "Get the Resource DAG"
  dag: Dag!
  "Search for runs"
  runs(backfillId: String, endDate: String, runId: String, startDate: String, tenantMnemonic: String): Run!
}

"The resources loaded for a given Resource Type"
type ResourceNodeResult {
  "The time this aggregation was last updated. Should be of the format YYYY-MM-DDThh:mm:ss+zz:zz"
  lastUpdated: String!
  "The results of this load grouped by the source resource that triggered them"
  resourceDetails: [ResourceResult!]!
  "The aggregate status of the resources' statuses"
  resourceResult: RunStatus!
  "The type of the resources being loaded"
  resourceType: String!
}

"The result of a group of resource being loaded for one source"
type ResourceResult {
  "Resources that were failed to load off of the source resource"
  failedResources: [FailedResource!]
  "The ID of this record. A UUID"
  id: String!
  "Optional message"
  message: String
  "The Result Status of this group of resources"
  result: NodeResultStatus
  "The ID of the run this resource was loaded through. A UUID"
  runId: String!
  "The FHIR resource that triggered the load for these resources"
  sourceResource: FhirResource!
  "Resources that were successfully loaded off of the source resource"
  successfulResources: [String!]
  "Type of the resource that has been loaded"
  targetResourceType: String
  "Time that the resources were loaded in. Should be of the format YYYY-MM-DDThh:mm:ss+zz:zz"
  time: String!
}

"A data load run"
type Run {
  "The corresponding backfill ID if the run was triggered by a Backfill. A UUID"
  backfillId: String
  "Optional description for the Run"
  description: String
  "The ID of the run. A UUID"
  id: String!
  "The list of initial resources in this run that trigger the loading of other resources"
  initialLoadResources: [FhirResource!]!
  "The resources in this run that that had loading triggered by one of the initial resources grouped by resource type"
  loadedResources(resourceTypes: [String!]!): [ResourceNodeResult!]!
  "The results of all the data loads for the run"
  resourceResults: [ResourceNodeResult!]!
  "Status of the run"
  result: RunStatus!
  "The time the run had ended if applicable. Should be of the format YYYY-MM-DDThh:mm:ss+zz:zz"
  runRangeEndTime: String
  "The time the run had started. Should be of the format YYYY-MM-DDThh:mm:ss+zz:zz"
  runRangeStartTime: String!
  "Tenant from which the data was loaded"
  tenant: Tenant!
  "The way the run was triggered"
  type: RunType!
}

"Tenant"
type Tenant {
  "Tenant Mnemonic"
  mnemonic: String!
  "Optional tenant name"
  name: String
}

enum NodeResultStatus {
  BLOCKED
  ERROR
  FAILURE
  SUCCESS
}

enum RunStatus {
  ERROR
  FAILURE
  INCOMPLETE
  SUCCESS
}

enum RunType {
  AD_HOC
  BACKFILL
  NIGHTLY
  REALTIME
}
